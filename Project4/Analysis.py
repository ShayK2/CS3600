from Testing import testPenData, testCarData, testXorData, average, stDeviation

penResults = [];
carResults = [];

for index in range(5):
    penResults.append(testPenData()[1]);
    carResults.append(testCarData()[1]);

print max(penResults);
print max(carResults);
print average(penResults);
print average(carResults);
print stDeviation(penResults);
print stDeviation(carResults);

"""
Q5:
[0.907661520869068, 0.9013722126929674, 0.9045168667810177, 0.9033733562035449, 0.89136649514008]
[0.8992146596858639, 0.8920157068062827, 0.8972513089005235, 0.8926701570680629, 0.8880890052356021]
"""

for index in range(9):
    penResults = [];
    carResults = [];
    for ind in range(5):
        penResults.append(testPenData([5 * index])[1]);
        carResults.append(testCarData([5 * index])[1]);
    print str(index * 5) + " Layers";

    print max(penResults);
    print max(carResults);
    print average(penResults);
    print average(carResults);
    print stDeviation(penResults);
    print stDeviation(carResults);

"""
Q6:
[0.0, 0.0, 0.0, 0.0, 0.0]
[0.7048429319371727, 0.7048429319371727, 0.7048429319371727, 0.7048429319371727, 0.7048429319371727]

[0.8141795311606632, 0.8441966838193253, 0.8387650085763293, 0.8319039451114922, 0.8144654088050315]
[0.8520942408376964, 0.856675392670157, 0.8298429319371727, 0.81217277486911, 0.8507853403141361]

[0.8927958833619211, 0.8945111492281304, 0.9028016009148084, 0.8962264150943396, 0.8779302458547742]
[0.8586387434554974, 0.8638743455497382, 0.8769633507853403, 0.8789267015706806, 0.8880890052356021]

[0.8982275586049171, 0.8973699256718125, 0.8939393939393939, 0.9336763865065751, 0.8987993138936535]
[0.7866492146596858, 0.819371727748691, 0.8704188481675392, 0.8200261780104712, 0.8481675392670157]

[0.8956546598056032, 0.8907947398513436, 0.9005145797598628, 0.8862206975414523, 0.9030874785591767]
[0.8475130890052356, 0.8547120418848168, 0.8573298429319371, 0.8252617801047121, 0.8363874345549738]

[0.9039451114922813, 0.9039451114922813, 0.900800457404231, 0.9068038879359634, 0.9005145797598628]
[0.8331151832460733, 0.8318062827225131, 0.8134816753926701, 0.8638743455497382, 0.856675392670157]

[0.9050886220697542, 0.9025157232704403, 0.9059462550028587, 0.9059462550028587, 0.9079473985134362]
[0.849476439790576, 0.8573298429319371, 0.8134816753926701, 0.8239528795811518, 0.8304973821989529]

[0.8922241280731846, 0.9013722126929674, 0.9010863350485993, 0.9033733562035449, 0.9045168667810177]
[0.8318062827225131, 0.8416230366492147, 0.8462041884816754, 0.837696335078534, 0.8291884816753927]

[0.9030874785591767, 0.9025157232704403, 0.8985134362492853, 0.8942252715837622, 0.9028016009148084]
[0.8226439790575916, 0.8416230366492147, 0.8259162303664922, 0.8370418848167539, 0.8527486910994765]
"""

xorResults = [];
for index in range(41):
    results = [];
    for ind in range(5):
        results.append(testXorData([index])[1]);
    xorResults.append(results);
for result in xorResults: print result;

"""
Q7:
[0.5, 0.0, 0.5, 0.5, 0.0]
[0.5, 0.0, 0.5, 0.75, 0.5]
[0.5, 0.5, 0.25, 0.25, 0.25]
[0.25, 0.5, 0.25, 0.5, 0.0]
[0.5, 0.5, 0.25, 0.25, 0.25]
[0.5, 0.5, 0.25, 0.0, 0.25]
[0.5, 0.25, 0.5, 0.5, 0.25]
[0.5, 0.75, 0.75, 0.75, 0.25]
[0.5, 0.25, 0.25, 0.5, 0.5]
[0.25, 0.75, 0.0, 0.5, 0.25]
[0.5, 0.5, 0.25, 0.0, 0.5]
[0.5, 0.5, 0.5, 0.25, 0.5]
[1.0, 0.5, 0.25, 0.5, 0.5]
[0.25, 0.5, 0.5, 0.75, 0.75]
[0.25, 0.5, 0.5, 0.25, 0.25]
[0.25, 0.0, 0.0, 0.5, 0.5]
[0.5, 0.5, 0.5, 0.25, 0.5]
[0.25, 0.5, 0.75, 0.5, 0.75]
[0.5, 0.5, 0.5, 0.25, 0.5]
[0.75, 0.5, 0.75, 0.75, 0.5]
[0.5, 0.5, 0.75, 0.25, 0.25]
[0.5, 0.75, 0.75, 0.25, 0.5]
[0.75, 1.0, 0.5, 0.5, 0.5]
[1.0, 0.5, 0.25, 0.5, 0.5]
[0.75, 0.5, 1.0, 0.25, 0.75]
[0.5, 0.75, 0.25, 0.75, 0.0]
[0.5, 1.0, 0.75, 1.0, 0.75] <-- this works well
"""